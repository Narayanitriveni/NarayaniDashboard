generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Admin {
  id       String @id @default(cuid())
  username String @unique
}

model Student {
  id          String         @id @default(cuid())
  username    String         @unique
  name        String
  surname     String
  email       String?        @unique
  phone       String?        @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime       @default(now())
  parentId    String?
  birthday    DateTime
  StudentId   String         @unique
  IEMISCODE   Int
  disability  DisabilityType @default(NONE)
  fatherName  String
  motherName  String
  attendances Attendance[]
  fees        Fee[]
  results     Result[]
  parent      Parent?        @relation(fields: [parentId], references: [id])
  enrollments Enrollment[]
}

model Enrollment {
  id        String   @id @default(cuid())
  studentId String
  classId   Int
  gradeId   Int
  year      Int       // Academic year (BS)
  joinedAt  DateTime  @default(now())
  leftAt    DateTime?

  student   Student   @relation(fields: [studentId], references: [StudentId])
  class     Class     @relation(fields: [classId], references: [id])
  grade     Grade     @relation(fields: [gradeId], references: [id])

  @@unique([studentId, year])
}

model Teacher {
  id          String              @id @default(cuid())
  username    String              @unique
  name        String
  surname     String
  email       String?             @unique
  phone       String?             @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime            @default(now())
  birthday    DateTime
  teacherId   String              @unique
  classes     Class[]
  lessons     Lesson[]
  attendances TeacherAttendance[]
  subjects    Subject[]           @relation("SubjectToTeacher")
}

model Parent {
  id        String    @id @default(cuid())
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  parentId  String    @unique
  students  Student[]
}

model Grade {
  id       Int       @id @default(autoincrement())
  level    Int       @unique
  classes  Class[]
  students Enrollment[]
}

model Class {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  capacity      Int
  supervisorId  String?
  gradeId       Int
  announcements Announcement[]
  attendances   Attendance[]
  grade         Grade          @relation(fields: [gradeId], references: [id])
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  events        Event[]
  lessons       Lesson[]
  students      Enrollment[]
  exams         Exam[]
  fees          Fee[]          // Add fees relation
  feeStructures ClassFeeStructure[] // Add fee structures relation
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  lessons  Lesson[]
  teachers Teacher[] @relation("SubjectToTeacher")
  exams    Exam[]
}

model Lesson {
  id          Int          @id @default(autoincrement())
  name        String
  day         Day?
  startTime   DateTime
  endTime     DateTime
  subjectId   Int
  classId     Int
  teacherId   String
  assignments Assignment[]
  attendances Attendance[]
  class       Class        @relation(fields: [classId], references: [id])
  subject     Subject      @relation(fields: [subjectId], references: [id])
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  subjectId Int
  classId   Int
  subject   Subject  @relation(fields: [subjectId], references: [id])
  class     Class    @relation(fields: [classId], references: [id])
  results   Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Int
  examId       Int?
  assignmentId Int?
  studentId    String
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  exam         Exam?       @relation(fields: [examId], references: [id])
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id        Int              @id @default(autoincrement())
  date      DateTime
  studentId String
  lessonId  Int?
  inTime    DateTime?
  outTime   DateTime?
  status    AttendanceStatus @default(PRESENT)
  classId   Int
  class     Class            @relation(fields: [classId], references: [id])
  lesson    Lesson?          @relation(fields: [lessonId], references: [id])
  student   Student          @relation(fields: [studentId], references: [id])
}

model TeacherAttendance {
  id        Int              @id @default(autoincrement())
  date      DateTime
  teacherId String
  inTime    String?
  outTime   String?
  status    AttendanceStatus @default(PRESENT)
  teacher   Teacher          @relation(fields: [teacherId], references: [id], onDelete: Cascade)
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Accountant {
  id        String   @id @default(cuid())
  username  String   @unique
  name      String
  surname   String
  email     String?  @unique
  phone     String?  @unique
  address   String
  createdAt DateTime @default(now())
}

model Fee {
  id          Int         @id @default(autoincrement())
  studentId   String
  classId     Int?        // Make classId optional for now
  category    FeeCategory @default(TUITION_FEE)
  totalAmount BigInt
  paidAmount  BigInt      @default(0)
  dueDate     DateTime
  status      FeeStatus   @default(UNPAID)
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  student     Student     @relation(fields: [studentId], references: [id])
  class       Class?      @relation(fields: [classId], references: [id]) // Make class relation optional
  payments    Payment[]
}

model Payment {
  id            String        @id @default(cuid())
  transactionId String?       @unique
  amount        BigInt
  date          DateTime      @default(now())
  method        PaymentMethod
  reference     String?
  category      FeeCategory   @default(TUITION_FEE)
  feeId         Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  fee           Fee           @relation(fields: [feeId], references: [id])
}

model Finance {
  id          Int         @id @default(autoincrement())
  expenseType ExpenseType
  amount      BigInt
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
}

model ClassFeeStructure {
  id            Int         @id @default(autoincrement())
  classId       Int
  year          Int         // Academic year (BS)
  category      FeeCategory
  amount        BigInt
  dueDate       DateTime?   // Optional fixed due date
  dueDaysOffset Int?        // Optional days offset from creation
  description   String?
  createdAt     DateTime    @default(now())
  
  class         Class       @relation(fields: [classId], references: [id], onDelete: Cascade)
  
  @@unique([classId, year, category])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

enum FeeStatus {
  PAID
  UNPAID
  PARTIAL
  OVERDUE
  WAIVED
}

enum PaymentMethod {
  CASH
  CARD
  CHECK
  BANK_TRANSFER
  OTHER
  UPI
}

enum DisabilityType {
  NONE
  VISION
  HEARING
  MOBILITY
  COGNITIVE
  SPEECH
  MENTAL_HEALTH
  OTHER
}

enum ExpenseType {
  BUS
  SALARY
  MAINTENANCE
  SUPPLIES
  UTILITIES
  OTHER
}

enum FeeCategory {
  PARENT_SUPPORT          // अभिभावक सहयोग
  PARENT_SUPPORT_MONTHLY          // अभिभावक सहयोग मासिक
  TUITION_FEE            // शिक्षण शुल्कं
  DEPOSIT_FEE            // धरौटी शुल्क
  ELECTRICITY_TRANSPORT  // विद्युत/यातायात शुल्क
  LIBRARY_FEE            // पुस्तकालय शुल्क
  REGISTRATION_FEE       // रजिष्ट्रेशन शुल्क
  IDENTITY_SPORTS        // परिचय पत्र तथा खेलकुद
  EXAM_FEE_1             // । परीक्षा शुल्क
  EXAM_FEE_2             // || परीक्षा शुल्क
  EXAM_FEE_3             // ||| परीक्षा शुल्क
  EXAM_FEE_4             // |||| परीक्षा शुल्क
  SEE_EXAM_FEE           // SEE परीक्षा
  BUILDING_MISC_FEE      // भवन एवं विविध शुल्क
  CERTIFICATE_FEE        // प्रमाण पत्र शुल्क
  GRADE_SHEET            // लब्धाङ्क पत्र
  TIE_BELT               // टाई बेल्ट
}
