generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Admin {
  id       String @id @default(cuid())
  username String @unique
}

model Student {
  id          String         @id @default(cuid())
  username    String         @unique
  name        String
  surname     String
  email       String?        @unique
  phone       String?        @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime       @default(now())
  parentId    String?
  birthday    DateTime
  StudentId   String         @unique
  IEMISCODE   Int
  disability  DisabilityType @default(NONE)
  fatherName  String
  motherName  String
  attendances Attendance[]
  fees        Fee[]
  results     Result[]
  parent      Parent?        @relation(fields: [parentId], references: [id])
  enrollments Enrollment[]
}

model Enrollment {
  id        String   @id @default(cuid())
  studentId String
  classId   Int
  gradeId   Int
  year      Int       // Academic year (BS)
  joinedAt  DateTime  @default(now())
  leftAt    DateTime?

  student   Student   @relation(fields: [studentId], references: [StudentId])
  class     Class     @relation(fields: [classId], references: [id])
  grade     Grade     @relation(fields: [gradeId], references: [id])

  @@unique([studentId, year])
}

model Teacher {
  id          String              @id @default(cuid())
  username    String              @unique
  name        String
  surname     String
  email       String?             @unique
  phone       String?             @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime            @default(now())
  birthday    DateTime
  teacherId   String              @unique
  classes     Class[]
  lessons     Lesson[]
  attendances TeacherAttendance[]
  subjects    Subject[]           @relation("SubjectToTeacher")
}

model Parent {
  id        String    @id @default(cuid())
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  parentId  String    @unique
  students  Student[]
}

model Grade {
  id       Int       @id @default(autoincrement())
  level    Int       @unique
  classes  Class[]
  students Enrollment[]
}

model Class {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  capacity      Int
  supervisorId  String?
  gradeId       Int
  announcements Announcement[]
  attendances   Attendance[]
  grade         Grade          @relation(fields: [gradeId], references: [id])
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  events        Event[]
  lessons       Lesson[]
  students      Enrollment[]
  exams         Exam[]
  fees          Fee[]          // Add fees relation
  feeStructures ClassFeeStructure[] // Add fee structures relation
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  lessons  Lesson[]
  teachers Teacher[] @relation("SubjectToTeacher")
  exams    Exam[]
}

model Lesson {
  id          Int          @id @default(autoincrement())
  name        String
  day         Day?
  startTime   DateTime
  endTime     DateTime
  subjectId   Int
  classId     Int
  teacherId   String
  assignments Assignment[]
  attendances Attendance[]
  class       Class        @relation(fields: [classId], references: [id])
  subject     Subject      @relation(fields: [subjectId], references: [id])
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  subjectId Int
  classId   Int
  subject   Subject  @relation(fields: [subjectId], references: [id])
  class     Class    @relation(fields: [classId], references: [id])
  results   Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Int
  examId       Int?
  assignmentId Int?
  studentId    String
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  exam         Exam?       @relation(fields: [examId], references: [id])
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id        Int              @id @default(autoincrement())
  date      DateTime
  studentId String
  lessonId  Int?
  inTime    DateTime?
  outTime   DateTime?
  status    AttendanceStatus @default(PRESENT)
  classId   Int
  class     Class            @relation(fields: [classId], references: [id])
  lesson    Lesson?          @relation(fields: [lessonId], references: [id])
  student   Student          @relation(fields: [studentId], references: [id])
}

model TeacherAttendance {
  id        Int              @id @default(autoincrement())
  date      DateTime
  teacherId String
  inTime    String?
  outTime   String?
  status    AttendanceStatus @default(PRESENT)
  teacher   Teacher          @relation(fields: [teacherId], references: [id], onDelete: Cascade)
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Accountant {
  id        String   @id @default(cuid())
  username  String   @unique
  name      String
  surname   String
  email     String?  @unique
  phone     String?  @unique
  address   String
  createdAt DateTime @default(now())
}

model Fee {
  id          Int         @id @default(autoincrement())
  studentId   String
  classId     Int?        // Make classId optional for now
  category    FeeCategory @default(TUITION_FEE)
  totalAmount BigInt
  paidAmount  BigInt      @default(0)
  dueDate     DateTime
  status      FeeStatus   @default(UNPAID)
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  student     Student     @relation(fields: [studentId], references: [id])
  class       Class?      @relation(fields: [classId], references: [id]) // Make class relation optional
  payments    Payment[]
}

model Payment {
  id            String        @id @default(cuid())
  transactionId String?       @unique
  amount        BigInt
  date          DateTime      @default(now())
  method        PaymentMethod
  reference     String?
  category      FeeCategory   @default(TUITION_FEE)
  feeId         Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  fee           Fee           @relation(fields: [feeId], references: [id])
}

model Finance {
  id          Int         @id @default(autoincrement())
  type        TransactionType
  expenseCategory ExpenseCategory? // Used when type is EXPENSE
  incomeCategory  IncomeCategory?  // Used when type is INCOME
  amount      BigInt
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model ClassFeeStructure {
  id            Int         @id @default(autoincrement())
  classId       Int
  year          Int         // Academic year (BS)
  category      FeeCategory
  amount        BigInt
  dueDate       DateTime?   // Optional fixed due date
  dueDaysOffset Int?        // Optional days offset from creation
  description   String?
  createdAt     DateTime    @default(now())
  
  class         Class       @relation(fields: [classId], references: [id], onDelete: Cascade)
  
  @@unique([classId, year, category])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

enum FeeStatus {
  PAID
  UNPAID
  PARTIAL
  OVERDUE
  WAIVED
}

enum PaymentMethod {
  CASH
  CARD
  CHECK
  BANK_TRANSFER
  OTHER
  UPI
}

enum DisabilityType {
  NONE
  VISION
  HEARING
  MOBILITY
  COGNITIVE
  SPEECH
  MENTAL_HEALTH
  OTHER
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum ExpenseCategory {
  TEACHER_SALARY                // शिक्षक तलब भत्ता मा.वि., नि.मा.वि प्रा.वि./पोशाक
  STAFF_SALARY                  // विद्यालय कर्मचारी तलब भत्ता/पोशाक
  CHILD_DEV_TEACHER_SALARY      // वाल विकाश शिक्षक तलब भत्ता
  LOCAL_TEACHER_SALARY          // गा.पा. शिक्षक तलव भत्ता
  PROVIDENT_FUND               // क.सं. कोष
  CITIZEN_INVESTMENT_FUND      // नागरिक लगानी कोष
  TAX_DEDUCTION                // कर कट्टी १ र १०%
  PRIVATE_TEACHER_SALARY       // निजि स्रोत शिक्षक तलव भत्ता
  ADMIN_STATIONERY             // मसलन्द, प्रशासनिक, बुक कर्नर
  SCHOLARSHIP                  // छात्रवृत्ति (२ आ.व.)
  DAY_MEAL                     // दिवा खाजा
  TEXTBOOKS                    // पाठ्यपुस्तक
  PLAYGROUND                   // गाउापालिकाबाट खेलमैदान
  TRUST_BUILDING_REPAIR        // टष्ट भवन मर्मत
  EXAM_SECONDARY               // परिक्षा मा.वि.
  ADMIN_EXAM_PLUS_TWO          // प्रशासनिक, परिक्षा +२
  MAINTENANCE                  // मर्मत सम्भार
  EDUCATIONAL_MATERIALS        // शैक्षिक सामग्री
  BUILDING_CONSTRUCTION        // दुई तले ४ कोठे भवन निर्माण
  AUDITING                     // लेखापरीक्षण
  COLUMN_CONSTRUCTION          // स्तम्भ निर्माण
  TOILET_CLEANING              // शौचालय सरसफाई
  TELEPHONE_POST               // टेलिफोन हुलाक
  LAND_REVENUE                 // मालपोत
  TRACK_SUIT                   // ट्रेक सुट
  SOUND_SYSTEM                 // साउण्ड सिस्टम उपकरण
  ELECTRICITY                  // विद्युत
  COMPUTER_MATERIALS           // कम्प्युटर सामग्री
  STEM_LAB                     // स्टेम ल्याव
  SARASWATI_PUJA               // सरस्वती पुजा
  DAILY_TRAVEL                 // दैनिक भ्रमण खर्च
  STATUE_CONSTRUCTION          // मुर्ति निर्माण
  SPORTS                       // खेलकुद
  LIABILITY                    // दायित्व
  TIE_BELT                     // टाई बेल्ट
  BUS_MANAGEMENT               // बस व्यवस्थापन तथा ईन्धन
  EXCESS_REFUND                // निकासामा बढि छात्रवृत्ति तथा तलव फिर्ता
  HOSPITALITY                  // अतिथि सत्कार (चियापान)
  TEACHER_SELECTION            // शिक्षक छनौट खर्च
  OTHER                        // अन्य
}

enum IncomeCategory {
  OPENING_BALANCE_RASTRIYA_BANIJYA_BANK_PARASI      // अल्या रा.बा.बैंक लि. परासी ६७१
  OPENING_BALANCE_RASTRIYA_BANIJYA_BANK_BARDAGHAT   // अल्या रा.बा. बैंक लि. बर्दघाट ३६५
  OPENING_BALANCE_RASTRIYA_BANIJYA_BANK_TRIVENI     // अल्या रा.बा.बैंक लि. त्रिवेणी ९००६
  OPENING_BALANCE_RASTRIYA_BANIJYA_BANK_TRIVENI_2   // अल्या राःबा. बैंक लि. त्रिवेणी ६३८००१
  OPENING_BALANCE_KRISHI_BANK_BARDAGHAT            // अल्या कृषि वि. बैंक लि. बर्दघाट
  OPENING_BALANCE_KRISHI_BANK_BARDAGHAT_FIXED      // अल्या कृषि वि. बैंक लि. बर्दघाट मुद्यती
  OPENING_BALANCE_SIDDHARTHA_BANK_DUMKIWAS         // अल्या सिद्धार्थ बैंक लिमिटेड दुम्कीवास
  OPENING_BALANCE_COOPERATIVE                      // अल्या सा.कि.कृ.स.सं.लि. (वा.वि.के)
  OPENING_BALANCE_RAMESHCHANDRA_ADVANCE            // अल्या रमेशचन्द्र रौनियार पेश्की
  OPENING_BALANCE_PRADIP_ADVANCE                   // अल्या प्रदिप कुमार चौधरी पेश्की
  OPENING_BALANCE_CONSUMER_COMMITTEE               // अल्या उपभोक्ता समिति परासी, त्रिवेणी
  OPENING_BALANCE_PREVIOUS_YEAR                    // मौज्दात (२०७७/०७८)
  TEACHER_SALARY                                   // शिक्षक तलब भत्ता ( प्रा.वि, नि.मा.वि., मा.वि. राहत)
  STAFF_SALARY                                     // विद्यालय कर्मचारी तलव भत्ता
  CHILD_DEV_SALARY                                 // वाल विकाश तलब भत्ता
  LOCAL_TEACHER_SALARY                             // गा.पा. शिक्षक तलब भत्ता
  ADMIN_STATIONERY                                 // मसलन्द, प्रशासनिक, बुक कर्नर
  SCHOLARSHIP                                      // छात्रवृती
  DAY_MEAL                                         // दिवा खाजा
  TEXTBOOKS                                        // पाठ्यपुस्तक
  BUILDING_RECONSTRUCTION                          // रा. पुन निर्माण प्राधिकरण भवन निर्माण
  LOCAL_PLAYGROUND_GRANT                           // गा.पा. खेलमैदान अनुदान
  EARN_WHILE_LEARNING                              // पढ्‌दै कमाउदै कार्यक्रम
  EXAM                                             // परीक्षा
  BANK_INTEREST                                    // रा.वा.बैंक + सा.कि.सं.लि. व्याज
  PARENT_SUPPORT                                   // अभिभावक सहयोग
  CERTIFICATE                                      // प्रमाणपत्र
  ENDOWMENT_FUND                                   // अक्षयकोष
  NATIONAL_EXAM_BOARD                              // रा.प.बोर्ड बुटवल
  STEM_LAB                                         // STEM LAB
  GRADE_11_PARENT_SUPPORT                          // कक्षा ११ बाट अभिभावक सहयोग
  GRADE_12_PARENT_SUPPORT                          // कक्षा १२ बाट अभिभावक सहयोग
  ADVERTISEMENT                                    // विज्ञापनबाट
  TIE_BELT                                         // टाई बेल्ट
  TRANSPORTATION                                   // यातायात (बस)
  MAGHE_MELA                                       // माघेमेलां
  N_CELL                                           // एन. सेलबाट
  YAGYA_SUPPORT                                    // यज्ञ सहयोग
  ASSEMBLY_HALL                                    // सभाहल
  PAPER_SALES                                      // कागज बिक्रीबाट
  OTHER                                            // अन्य
}

enum FeeCategory {
  PARENT_SUPPORT          // अभिभावक सहयोग
  PARENT_SUPPORT_MONTHLY          // अभिभावक सहयोग मासिक
  TUITION_FEE            // शिक्षण शुल्कं
  DEPOSIT_FEE            // धरौटी शुल्क
  ELECTRICITY_TRANSPORT  // विद्युत/यातायात शुल्क
  LIBRARY_FEE            // पुस्तकालय शुल्क
  REGISTRATION_FEE       // रजिष्ट्रेशन शुल्क
  IDENTITY_SPORTS        // परिचय पत्र तथा खेलकुद
  EXAM_FEE_1             // । परीक्षा शुल्क
  EXAM_FEE_2             // || परीक्षा शुल्क
  EXAM_FEE_3             // ||| परीक्षा शुल्क
  EXAM_FEE_4             // |||| परीक्षा शुल्क
  SEE_EXAM_FEE           // SEE परीक्षा
  BUILDING_MISC_FEE      // भवन एवं विविध शुल्क
  CERTIFICATE_FEE        // प्रमाण पत्र शुल्क
  GRADE_SHEET            // लब्धाङ्क पत्र
  TIE_BELT               // टाई बेल्ट
}
